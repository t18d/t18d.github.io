# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']
    paths:
      - '**.md'
      - '**.html'
      - '*.txt'
      - '*.json'
      - .github/workflows/jekyll.yml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build1:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
    # Enable listing of files matching each filter.
    # Paths to files will be available in `${FILTER_NAME}_files` output variable.
    # Paths will be escaped and space-delimited.
    # Output is usable as command-line argument list in Linux shell
          list-files: shell

    # In this example changed files will be checked by linter.
    # It doesn't make sense to lint deleted files.
    # Therefore we specify we are only interested in added or modified files.
          filters: |
            markdown:
              - added|modified: '*.md'
      - name: Lint Markdown
        if: ${{ steps.filter.outputs.markdown == 'true' }}
        run: |
          sed -i "0,/last_modified_at.*/s//last_modified_at: $(date -Iseconds)/" ${{ steps.filter.outputs.markdown_files }}
      # Capture original commit author and message
      - name: Get author
        id: author
        run: |
          echo "name=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
          echo "email=$(git log -1 --pretty=format:'%ae')" >> $GITHUB_OUTPUT
          {
            echo "msg<<EOF"
            git log -1 --pretty=%B
            echo "EOF"
          } >> $GITHUB_OUTPUT

      # Amend the last commit instead of creating a new one
      - uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_options: '--amend --no-edit'
          commit_user_name: ${{ steps.author.outputs.name }}
          commit_user_email: ${{ steps.author.outputs.email }}
          commit_message: ${{ steps.author.outputs.msg }}
          push_options: '--force-with-lease'
      - name: Detect latest cached Ruby
        run: |
          if [ -d "/opt/hostedtoolcache/Ruby" ]; then
            LATEST_RUBY=$(ls -d /opt/hostedtoolcache/Ruby/*/x64/bin \
              | awk -F/ '{print $5}' \
              | sort -V \
              | tail -1)

            echo "LATEST_RUBY_VERSION=$LATEST_RUBY" >> $GITHUB_ENV
            echo "Latest cached Ruby: $LATEST_RUBY"
          else
            echo "No cached Ruby found; falling back to 'ruby'."
            echo "LATEST_RUBY_VERSION=ruby" >> $GITHUB_ENV
          fi
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.LATEST_RUBY_VERSION }}
          bundler-cache: true
          cache-version: 0
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: |
          bun install
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: PurgeCSS
        run: |
          bunx purgecss \
            --content "_site/**/*.html" \
            --css "_site/assets/css/valid.css" \
            --output "_site/assets/css"
      - name: Install minify
        run: |
          curl -L https://github.com/tdewolff/minify/releases/latest/download/minify_linux_amd64.tar.gz \
            | tar -xz
          sudo mv minify /usr/local/bin/minify

      - name: Minify HTML, CSS, JSON, SVG, XML
        run: |
          minify \
            -r -i \
            --match '*.html' '*.css' '*.json' '*.svg' '*.xml' \
            -- ./_site
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  build2:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Detect latest cached Ruby
        run: |
          if [ -d "/opt/hostedtoolcache/Ruby" ]; then
            LATEST_RUBY=$(ls -d /opt/hostedtoolcache/Ruby/*/x64/bin \
              | awk -F/ '{print $5}' \
              | sort -V \
              | tail -1)

            echo "LATEST_RUBY_VERSION=$LATEST_RUBY" >> $GITHUB_ENV
            echo "Latest cached Ruby: $LATEST_RUBY"
          else
            echo "No cached Ruby found; falling back to 'ruby'."
            echo "LATEST_RUBY_VERSION=ruby" >> $GITHUB_ENV
          fi
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.LATEST_RUBY_VERSION }}
          bundler-cache: true
          cache-version: 0
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: |
          bun install
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: PurgeCSS
        run: |
          bunx purgecss \
            --content "_site/**/*.html" \
            --css "_site/assets/css/valid.css" \
            --output "_site/assets/css"
      - name: Install minify
        run: |
          curl -L https://github.com/tdewolff/minify/releases/latest/download/minify_linux_amd64.tar.gz \
            | tar -xz
          sudo mv minify /usr/local/bin/minify

      - name: Minify HTML, CSS, JSON, SVG, XML
        run: |
          minify \
            -r -i \
            --match '*.html' '*.css' '*.json' '*.svg' '*.xml' \
            -- ./_site
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
  
  # Deployment job
  deploy1:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build1
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  deploy2:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build2
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
